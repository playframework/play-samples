play {
  server {
    http.address = localhost
    http.address = ${?TRANSPORT_HTTP_BIND_ADDRESS}
    https.address = localhost
    https.address = ${?TRANSPORT_HTTPS_BIND_ADDRESS}
    # Ports are hardcoded and the values match the values in the `deployment.yml` kubernetes
    # descriptor. We could use ENV_VAR overwrites to make this more flexible too.
    http.port = 9000
    https.port = 9443
  }
}

## Configures the keystore to use on production mode. You will probably need to use Env Var
## overrides (https://github.com/lightbend/config#optional-system-or-env-variable-overrides)
play.server.https.keyStore.path = conf/selfsigned.keystore

# http://www.playframework.com/documentation/latest/ApplicationSecret
play.http.secret.key = "default-value-used-locally-with-at-minimal-length"

# #grpc_enable_client_module
# conf/application.conf
## Modules - https://www.playframework.com/documentation/latest/Modules
play.modules {
  # To enable Pekko gRPC clients to be @Injected
  # This Module is generated by the Pekko gRPC sbt plugin. See your `target/scala-2.12/src_managed` folder.
  enabled += example.myapp.helloworld.grpc.PekkoGrpcClientModule
  disabled += "play.grpc.ClassicActorsystemProviderModule"
}
# #grpc_enable_client_module

# And we can configure the default target where the gRPC services are expected to run:
# (Alternatively Pekko service discovery can be used to discover them)
#
#                   ---------------
#                   |              |
# -- (HTTP/1.1) --> > Controller  --> --+
#                   |              |    |
#                   |              |    |
#         +-------> > gRPC Router  |    |
#         |         |              |    |
#         |         ----------------    |
#         |                             |
#         +------------ (HTTP/2) -------+
#
# The settings below configure the client that consumes "helloworld.GreeterService". Because a `host` and `port`
# are used, the client will directly point there. The `ssl-config` section of the settings is required because when
# running this example application we use a self-signed certificate. Therefore we need to tell the client to trust
# the invalid certificate.
pekko.grpc.client {

  "helloworld.GreeterService" {
    # default `host` to the address where the server's HTTPS endpoint was bound but use the `DEPLOYMENT_SERVICE_NAME`
    # when available.
    host = ${play.server.https.address}
    host = ${?DEPLOYMENT_SERVICE_NAME}
    port = ${play.server.https.port}
    use-tls = true
    # The Authority on the requests must match the CN on the server certificate. The certificate on
    # `conf/selfsigned.keystore` was issued to `localhost` so we must override the authority.
    override-authority = "localhost"

    # configure ssl to trust our fake certificate chain.
    ssl-config {
      trustManager = {
        stores = [
          {type = "JKS", path = ${user.dir}/conf/selfsigned.keystore}
        ]
      }
    }
  }
}
